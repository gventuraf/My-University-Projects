varying vec4 col;
uniform sampler2D tex;
uniform vec3 obs_pos;
uniform vec3 ambient_color;
varying vec3 P;
varying vec3 N;

void main(void)
{
    vec3 L = normalize(gl_LighSource[0].position.xyz - obs_pos); // light
    vec3 V = normalize(obs_pos - P); // observor
    vec3 R = normalize(reflect(L, N)); // reflection
    //*
    //*
    //* ambient
    vec4 ambC = gl_FrontLightProduct[0].ambient;
    //* diffuse
    vec4 dif_intensity = gl_FrontLightProduct[0].diffuse * max(dot(N, L), 0.0);
    vec4 difC = clamp(dif_intensity, 0.0, 1.0);
    //* specular
    vec4 spec_intensity = gl_FrontLightProduct[0].specular * pow(max(dot(R, V), 0.0), gl_FrontMaterial.shininess);
    vec4 specC = clamp(spec_intensity, 0.0, 1.0);
    //* Phong color
    vec4 phong_color = ambC + difC + specC;
    //*
    //*
    //* give color
    if (tex >= 0) {
        gl_FragColor = vec4(phong_color, 1.0) + vec4(ambient_color, 1.0);
    } else {
        gl_FragColor = col * phong_color + vec4(ambient_color, 1.0);
    }
}
